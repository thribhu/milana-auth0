{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar sha256_1 = __importDefault(require(\"crypto-js/sha256\"));\nvar enc_base64_1 = __importDefault(require(\"crypto-js/enc-base64\"));\nvar lib_typedarrays_1 = __importDefault(require(\"crypto-js/lib-typedarrays\"));\nvar PKCE = /** @class */function () {\n  /**\n   * Initialize the instance with configuration\n   * @param {IConfig} config\n   */\n  function PKCE(config) {\n    this.state = '';\n    this.codeVerifier = '';\n    this.config = config;\n  }\n  /**\n   * Generate the authorize url\n   * @param  {object} additionalParams include additional parameters in the query\n   * @return Promise<string>\n   */\n  PKCE.prototype.authorizeUrl = function (additionalParams) {\n    if (additionalParams === void 0) {\n      additionalParams = {};\n    }\n    var codeChallenge = this.pkceChallengeFromVerifier();\n    var queryString = new URLSearchParams(Object.assign({\n      response_type: 'code',\n      client_id: this.config.client_id,\n      state: this.getState(additionalParams.state || null),\n      scope: this.config.requested_scopes,\n      redirect_uri: this.config.redirect_uri,\n      code_challenge: codeChallenge,\n      code_challenge_method: 'S256'\n    }, additionalParams)).toString();\n    return \"\".concat(this.config.authorization_endpoint, \"?\").concat(queryString);\n  };\n  /**\n   * Given the return url, get a token from the oauth server\n   * @param  url current urlwith params from server\n   * @param  {object} additionalParams include additional parameters in the request body\n   * @return {Promise<ITokenResponse>}\n   */\n  PKCE.prototype.exchangeForAccessToken = function (url, additionalParams) {\n    var _this = this;\n    if (additionalParams === void 0) {\n      additionalParams = {};\n    }\n    return this.parseAuthResponseUrl(url).then(function (q) {\n      return fetch(_this.config.token_endpoint, {\n        method: 'POST',\n        body: new URLSearchParams(Object.assign({\n          grant_type: 'authorization_code',\n          code: q.code,\n          client_id: _this.config.client_id,\n          redirect_uri: _this.config.redirect_uri,\n          code_verifier: _this.getCodeVerifier()\n        }, additionalParams)),\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n        }\n      }).then(function (response) {\n        return response.json();\n      });\n    });\n  };\n  /**\n   * Given a refresh token, return a new token from the oauth server\n   * @param  refreshTokens current refresh token from server\n   * @return {Promise<ITokenResponse>}\n   */\n  PKCE.prototype.refreshAccessToken = function (refreshToken) {\n    return fetch(this.config.token_endpoint, {\n      method: 'POST',\n      body: new URLSearchParams({\n        grant_type: 'refresh_token',\n        client_id: this.config.client_id,\n        refresh_token: refreshToken\n      }),\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n      }\n    }).then(function (response) {\n      return response.json();\n    });\n  };\n  /**\n   * Get the current codeVerifier or generate a new one\n   * @return {string}\n   */\n  PKCE.prototype.getCodeVerifier = function () {\n    if (this.codeVerifier === '') {\n      this.codeVerifier = this.randomStringFromStorage('pkce_code_verifier');\n    }\n    return this.codeVerifier;\n  };\n  /**\n   * Get the current state or generate a new one\n   * @return {string}\n   */\n  PKCE.prototype.getState = function (explicit) {\n    if (explicit === void 0) {\n      explicit = null;\n    }\n    var stateKey = 'pkce_state';\n    if (explicit !== null) {\n      this.getStore().setItem(stateKey, explicit);\n    }\n    if (this.state === '') {\n      this.state = this.randomStringFromStorage(stateKey);\n    }\n    return this.state;\n  };\n  /**\n   * Get the query params as json from a auth response url\n   * @param  {string} url a url expected to have AuthResponse params\n   * @return {Promise<IAuthResponse>}\n   */\n  PKCE.prototype.parseAuthResponseUrl = function (url) {\n    var params = new URL(url).searchParams;\n    return this.validateAuthResponse({\n      error: params.get('error'),\n      query: params.get('query'),\n      state: params.get('state'),\n      code: params.get('code')\n    });\n  };\n  /**\n   * Generate a code challenge\n   * @return {Promise<string>}\n   */\n  PKCE.prototype.pkceChallengeFromVerifier = function () {\n    var hashed = (0, sha256_1.default)(this.getCodeVerifier());\n    return enc_base64_1.default.stringify(hashed).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n  };\n  /**\n   * Get a random string from storage or store a new one and return it's value\n   * @param  {string} key\n   * @return {string}\n   */\n  PKCE.prototype.randomStringFromStorage = function (key) {\n    var fromStorage = this.getStore().getItem(key);\n    if (fromStorage === null) {\n      this.getStore().setItem(key, lib_typedarrays_1.default.random(64));\n    }\n    return this.getStore().getItem(key) || '';\n  };\n  /**\n   * Validates params from auth response\n   * @param  {AuthResponse} queryParams\n   * @return {Promise<IAuthResponse>}\n   */\n  PKCE.prototype.validateAuthResponse = function (queryParams) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      if (queryParams.error) {\n        return reject({\n          error: queryParams.error\n        });\n      }\n      if (queryParams.state !== _this.getState()) {\n        return reject({\n          error: 'Invalid State'\n        });\n      }\n      return resolve(queryParams);\n    });\n  };\n  /**\n   * Get the storage (sessionStorage / localStorage) to use, defaults to sessionStorage\n   * @return {Storage}\n   */\n  PKCE.prototype.getStore = function () {\n    var _a;\n    return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.storage) || sessionStorage;\n  };\n  return PKCE;\n}();\nexports.default = PKCE;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","sha256_1","require","enc_base64_1","lib_typedarrays_1","PKCE","config","state","codeVerifier","prototype","authorizeUrl","additionalParams","codeChallenge","pkceChallengeFromVerifier","queryString","URLSearchParams","assign","response_type","client_id","getState","scope","requested_scopes","redirect_uri","code_challenge","code_challenge_method","toString","concat","authorization_endpoint","exchangeForAccessToken","url","_this","parseAuthResponseUrl","then","q","fetch","token_endpoint","method","body","grant_type","code","code_verifier","getCodeVerifier","headers","Accept","response","json","refreshAccessToken","refreshToken","refresh_token","randomStringFromStorage","explicit","stateKey","getStore","setItem","params","URL","searchParams","validateAuthResponse","error","get","query","hashed","default","stringify","replace","key","fromStorage","getItem","random","queryParams","Promise","resolve","reject","_a","storage","sessionStorage"],"sources":["/home/dell/dev/upwork/casdoor-auth/milana-casdoor-auth/node_modules/js-pkce/dist/PKCE.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sha256_1 = __importDefault(require(\"crypto-js/sha256\"));\nvar enc_base64_1 = __importDefault(require(\"crypto-js/enc-base64\"));\nvar lib_typedarrays_1 = __importDefault(require(\"crypto-js/lib-typedarrays\"));\nvar PKCE = /** @class */ (function () {\n    /**\n     * Initialize the instance with configuration\n     * @param {IConfig} config\n     */\n    function PKCE(config) {\n        this.state = '';\n        this.codeVerifier = '';\n        this.config = config;\n    }\n    /**\n     * Generate the authorize url\n     * @param  {object} additionalParams include additional parameters in the query\n     * @return Promise<string>\n     */\n    PKCE.prototype.authorizeUrl = function (additionalParams) {\n        if (additionalParams === void 0) { additionalParams = {}; }\n        var codeChallenge = this.pkceChallengeFromVerifier();\n        var queryString = new URLSearchParams(Object.assign({\n            response_type: 'code',\n            client_id: this.config.client_id,\n            state: this.getState(additionalParams.state || null),\n            scope: this.config.requested_scopes,\n            redirect_uri: this.config.redirect_uri,\n            code_challenge: codeChallenge,\n            code_challenge_method: 'S256',\n        }, additionalParams)).toString();\n        return \"\".concat(this.config.authorization_endpoint, \"?\").concat(queryString);\n    };\n    /**\n     * Given the return url, get a token from the oauth server\n     * @param  url current urlwith params from server\n     * @param  {object} additionalParams include additional parameters in the request body\n     * @return {Promise<ITokenResponse>}\n     */\n    PKCE.prototype.exchangeForAccessToken = function (url, additionalParams) {\n        var _this = this;\n        if (additionalParams === void 0) { additionalParams = {}; }\n        return this.parseAuthResponseUrl(url).then(function (q) {\n            return fetch(_this.config.token_endpoint, {\n                method: 'POST',\n                body: new URLSearchParams(Object.assign({\n                    grant_type: 'authorization_code',\n                    code: q.code,\n                    client_id: _this.config.client_id,\n                    redirect_uri: _this.config.redirect_uri,\n                    code_verifier: _this.getCodeVerifier(),\n                }, additionalParams)),\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\n                },\n            }).then(function (response) { return response.json(); });\n        });\n    };\n    /**\n     * Given a refresh token, return a new token from the oauth server\n     * @param  refreshTokens current refresh token from server\n     * @return {Promise<ITokenResponse>}\n     */\n    PKCE.prototype.refreshAccessToken = function (refreshToken) {\n        return fetch(this.config.token_endpoint, {\n            method: 'POST',\n            body: new URLSearchParams({\n                grant_type: 'refresh_token',\n                client_id: this.config.client_id,\n                refresh_token: refreshToken,\n            }),\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\n            },\n        }).then(function (response) { return response.json(); });\n    };\n    /**\n     * Get the current codeVerifier or generate a new one\n     * @return {string}\n     */\n    PKCE.prototype.getCodeVerifier = function () {\n        if (this.codeVerifier === '') {\n            this.codeVerifier = this.randomStringFromStorage('pkce_code_verifier');\n        }\n        return this.codeVerifier;\n    };\n    /**\n     * Get the current state or generate a new one\n     * @return {string}\n     */\n    PKCE.prototype.getState = function (explicit) {\n        if (explicit === void 0) { explicit = null; }\n        var stateKey = 'pkce_state';\n        if (explicit !== null) {\n            this.getStore().setItem(stateKey, explicit);\n        }\n        if (this.state === '') {\n            this.state = this.randomStringFromStorage(stateKey);\n        }\n        return this.state;\n    };\n    /**\n     * Get the query params as json from a auth response url\n     * @param  {string} url a url expected to have AuthResponse params\n     * @return {Promise<IAuthResponse>}\n     */\n    PKCE.prototype.parseAuthResponseUrl = function (url) {\n        var params = new URL(url).searchParams;\n        return this.validateAuthResponse({\n            error: params.get('error'),\n            query: params.get('query'),\n            state: params.get('state'),\n            code: params.get('code'),\n        });\n    };\n    /**\n     * Generate a code challenge\n     * @return {Promise<string>}\n     */\n    PKCE.prototype.pkceChallengeFromVerifier = function () {\n        var hashed = (0, sha256_1.default)(this.getCodeVerifier());\n        return enc_base64_1.default.stringify(hashed).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n    };\n    /**\n     * Get a random string from storage or store a new one and return it's value\n     * @param  {string} key\n     * @return {string}\n     */\n    PKCE.prototype.randomStringFromStorage = function (key) {\n        var fromStorage = this.getStore().getItem(key);\n        if (fromStorage === null) {\n            this.getStore().setItem(key, lib_typedarrays_1.default.random(64));\n        }\n        return this.getStore().getItem(key) || '';\n    };\n    /**\n     * Validates params from auth response\n     * @param  {AuthResponse} queryParams\n     * @return {Promise<IAuthResponse>}\n     */\n    PKCE.prototype.validateAuthResponse = function (queryParams) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (queryParams.error) {\n                return reject({ error: queryParams.error });\n            }\n            if (queryParams.state !== _this.getState()) {\n                return reject({ error: 'Invalid State' });\n            }\n            return resolve(queryParams);\n        });\n    };\n    /**\n     * Get the storage (sessionStorage / localStorage) to use, defaults to sessionStorage\n     * @return {Storage}\n     */\n    PKCE.prototype.getStore = function () {\n        var _a;\n        return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.storage) || sessionStorage;\n    };\n    return PKCE;\n}());\nexports.default = PKCE;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}