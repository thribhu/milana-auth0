{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"style\"],\n  _excluded2 = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../rowSelection/gridRowSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils';\nimport { getMinimalContentHeight } from '../rows/gridRowsUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// Uses binary search to avoid looping through all possible positions\nexport function binarySearch(offset, positions) {\n  let sliceStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let sliceEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : positions.length;\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\nexport const getRenderableIndexes = _ref3 => {\n  let {\n    firstIndex,\n    lastIndex,\n    buffer,\n    minFirstIndex,\n    maxLastIndex\n  } = _ref3;\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const areRenderContextsEqual = (context1, context2) => {\n  if (context1 === context2) {\n    return true;\n  }\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\n// The `maxSize` is 3 so that reselect caches the `renderedColumns` values for the pinned left,\n// unpinned, and pinned right sections.\nconst MEMOIZE_OPTIONS = {\n  maxSize: 3\n};\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const theme = useTheme();\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const rowStyleCache = React.useRef(Object.create(null));\n  const prevGetRowProps = React.useRef();\n  const prevRootRowStyle = React.useRef();\n  const getRenderedColumnsRef = React.useRef(defaultMemoize((columns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, indexOfColumnWithFocusedCell) => {\n    // If the selected column is not within the current range of columns being displayed,\n    // we need to render it at either the left or right of the columns,\n    // depending on whether it is above or below the range.\n    let focusedCellColumnIndexNotInRange;\n    const renderedColumns = columns.slice(firstColumnToRender, lastColumnToRender);\n    if (indexOfColumnWithFocusedCell > -1) {\n      // check if it is not on the left pinned column.\n      if (firstColumnToRender > indexOfColumnWithFocusedCell && indexOfColumnWithFocusedCell >= minFirstColumn) {\n        focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell;\n      }\n      // check if it is not on the right pinned column.\n      else if (lastColumnToRender < indexOfColumnWithFocusedCell && indexOfColumnWithFocusedCell < maxLastColumn) {\n        focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell;\n      }\n    }\n    return {\n      focusedCellColumnIndexNotInRange,\n      renderedColumns\n    };\n  }, MEMOIZE_OPTIONS));\n  const indexOfColumnWithFocusedCell = React.useMemo(() => {\n    if (cellFocus !== null) {\n      return visibleColumns.findIndex(column => column.field === cellFocus.field);\n    }\n    return -1;\n  }, [cellFocus, visibleColumns]);\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    }\n\n    // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n\n    // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.rowHasAutoHeight(row.id);\n    }\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(Math.abs(left), columnPositions);\n      lastColumnIndex = binarySearch(Math.abs(left) + containerDimensions.width, columnPositions);\n    }\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerDimensions({\n        width: rootRef.current.clientWidth,\n        height: rootRef.current.clientHeight\n      });\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'debouncedResize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const direction = theme.direction === 'ltr' ? 1 : -1;\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = direction * gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer, theme.direction]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('scrollPositionChange', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);\n  const handleScroll = useEventCallback(event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft;\n\n    // On iOS and macOS, negative offsets are possible when swiping past the start\n    if (!prevRenderContext.current || scrollTop < 0) {\n      return;\n    }\n    if (theme.direction === 'ltr') {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n    if (theme.direction === 'rtl') {\n      if (scrollLeft > 0) {\n        return;\n      }\n    }\n\n    // When virtualization is disabled, the context never changes during scroll\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  });\n  const handleWheel = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  });\n  const handleTouchMove = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  });\n  const indexOfRowWithFocusedCell = React.useMemo(() => {\n    if (cellFocus !== null) {\n      return currentPage.rows.findIndex(row => row.id === cellFocus.id);\n    }\n    return -1;\n  }, [cellFocus, currentPage.rows]);\n  const getRows = function () {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      renderContext\n    };\n    var _rootProps$slotProps;\n    const {\n      onRowRender,\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    // If the selected row is not within the current range of rows being displayed,\n    // we need to render it at either the top or bottom of the rows,\n    // depending on whether it is above or below the range.\n\n    let isRowWithFocusedCellNotInRange = false;\n    if (indexOfRowWithFocusedCell > -1) {\n      const rowWithFocusedCell = currentPage.rows[indexOfRowWithFocusedCell];\n      if (firstRowToRender > indexOfRowWithFocusedCell || lastRowToRender < indexOfRowWithFocusedCell) {\n        isRowWithFocusedCellNotInRange = true;\n        if (indexOfRowWithFocusedCell > firstRowToRender) {\n          renderedRows.push(rowWithFocusedCell);\n        } else {\n          renderedRows.unshift(rowWithFocusedCell);\n        }\n        apiRef.current.calculateColSpan({\n          rowId: rowWithFocusedCell.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    let isColumnWihFocusedCellNotInRange = false;\n    if (firstColumnToRender > indexOfColumnWithFocusedCell || lastColumnToRender < indexOfColumnWithFocusedCell) {\n      isColumnWihFocusedCellNotInRange = true;\n    }\n    const {\n      focusedCellColumnIndexNotInRange,\n      renderedColumns\n    } = getRenderedColumnsRef.current(visibleColumns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, isColumnWihFocusedCellNotInRange ? indexOfColumnWithFocusedCell : -1);\n    const _ref = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.row) || {},\n      {\n        style: rootRowStyle\n      } = _ref,\n      rootRowProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const invalidatesCachedRowStyle = prevGetRowProps.current !== getRowProps || prevRootRowStyle.current !== rootRowStyle;\n    if (invalidatesCachedRowStyle) {\n      rowStyleCache.current = Object.create(null);\n    }\n    const rows = [];\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5;\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const isRowNotVisible = isRowWithFocusedCellNotInRange && cellFocus.id === id;\n      const lastVisibleRowIndex = isRowWithFocusedCellNotInRange ? firstRowToRender + i === currentPage.rows.length : firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      if (onRowRender) {\n        onRowRender(id);\n      }\n      const focusedCell = cellFocus !== null && cellFocus.id === id ? cellFocus.field : null;\n      const columnWithFocusedCellNotInRange = focusedCellColumnIndexNotInRange !== undefined && visibleColumns[focusedCellColumnIndexNotInRange];\n      const renderedColumnsWithFocusedCell = columnWithFocusedCellNotInRange && focusedCell ? [columnWithFocusedCellNotInRange, ...renderedColumns] : renderedColumns;\n      let tabbableCell = null;\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n      const _ref2 = typeof getRowProps === 'function' && getRowProps(id, model) || {},\n        {\n          style: rowStyle\n        } = _ref2,\n        rowProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n      if (!rowStyleCache.current[id]) {\n        const style = _extends({}, rowStyle, rootRowStyle);\n        rowStyleCache.current[id] = style;\n      }\n      rows.push( /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        focusedCellColumnIndexNotInRange: focusedCellColumnIndexNotInRange,\n        isNotVisible: isRowNotVisible,\n        rowHeight: baseRowHeight,\n        focusedCell: focusedCell,\n        tabbableCell: tabbableCell,\n        renderedColumns: renderedColumnsWithFocusedCell,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null || (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, rowProps, rootRowProps, {\n        style: rowStyleCache.current[id]\n      }), id));\n    }\n    prevGetRowProps.current = getRowProps;\n    prevRootRowStyle.current = rootRowStyle;\n    return rows;\n  };\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth >= containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = getMinimalContentHeight(apiRef, rootProps.rowHeight); // Give room to show the overlay when there no rows.\n    }\n\n    return size;\n  }, [apiRef, rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, needsHorizontalScrollbar, rootProps.autoHeight, rootProps.rowHeight, currentPage.rows.length]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  const rootStyle = React.useMemo(() => {\n    const style = {};\n    if (!needsHorizontalScrollbar) {\n      style.overflowX = 'hidden';\n    }\n    if (rootProps.autoHeight) {\n      style.overflowY = 'hidden';\n    }\n    return style;\n  }, [needsHorizontalScrollbar, rootProps.autoHeight]);\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.register('private', {\n    getRenderContext\n  });\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: function () {\n      let inputProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove\n      }, inputProps, {\n        style: inputProps.style ? _extends({}, inputProps.style, rootStyle) : rootStyle,\n        role: 'presentation'\n      });\n    },\n    getContentProps: function () {\n      let {\n        style\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        style: style ? _extends({}, style, contentSize) : contentSize,\n        role: 'presentation'\n      };\n    },\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef,\n      role: 'rowgroup'\n    })\n  };\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","React","ReactDOM","unstable_useForkRef","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","unstable_useEventCallback","useEventCallback","useTheme","defaultMemoize","useGridPrivateApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridFocusCellSelector","gridTabIndexCellSelector","useGridVisibleRows","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","getMinimalContentHeight","jsx","_jsx","binarySearch","offset","positions","sliceStart","sliceEnd","length","pivot","Math","floor","itemOffset","exponentialSearch","index","interval","abs","min","getRenderableIndexes","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","areRenderContextsEqual","context1","context2","firstRowIndex","lastRowIndex","firstColumnIndex","lastColumnIndex","MEMOIZE_OPTIONS","maxSize","useGridVirtualScroller","props","_currentPage$range3","_currentPage$range4","apiRef","rootProps","visibleColumns","ref","disableVirtualization","onRenderZonePositioning","renderZoneMinColumnIndex","renderZoneMaxColumnIndex","getRowProps","theme","columnPositions","columnsTotalWidth","cellFocus","cellTabIndex","rowsMeta","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","renderContext","setRenderContext","useState","prevRenderContext","scrollPosition","top","left","containerDimensions","setContainerDimensions","width","height","prevTotalWidth","rowStyleCache","Object","create","prevGetRowProps","prevRootRowStyle","getRenderedColumnsRef","columns","firstColumnToRender","lastColumnToRender","minFirstColumn","maxLastColumn","indexOfColumnWithFocusedCell","focusedCellColumnIndexNotInRange","renderedColumns","slice","useMemo","findIndex","column","field","getNearestIndexToRender","useCallback","_currentPage$range","_currentPage$range2","lastMeasuredIndexRelativeToAllRows","current","getLastMeasuredRowIndex","allRowsMeasured","Infinity","range","lastMeasuredIndexRelativeToCurrentPage","computeRenderContext","rows","autoHeight","hasRowWithAutoHeight","firstRowToRender","lastRowToRender","rowBuffer","i","row","rowHasAutoHeight","id","style","transform","scrollLeft","scrollTop","clientWidth","clientHeight","currentPageTotalHeight","handleResize","updateRenderZonePosition","nextRenderContext","initialFirstColumnToRender","columnBuffer","visibleRows","direction","state","updateRenderContext","publishEvent","initialRenderContext","params","handleScroll","event","currentTarget","topRowsScrolledSincePreviousRender","bottomRowsScrolledSincePreviousRender","topColumnsScrolledSincePreviousRender","bottomColumnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","flushSync","handleWheel","handleTouchMove","indexOfRowWithFocusedCell","getRows","_rootProps$slotProps","onRowRender","availableSpace","rowIndexOffset","position","renderedRows","forEach","push","calculateColSpan","rowId","isRowWithFocusedCellNotInRange","rowWithFocusedCell","unshift","isColumnWihFocusedCellNotInRange","_ref","slotProps","rootRowStyle","rootRowProps","invalidatesCachedRowStyle","_currentPage$range5","model","isRowNotVisible","lastVisibleRowIndex","baseRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","focusedCell","columnWithFocusedCellNotInRange","undefined","renderedColumnsWithFocusedCell","tabbableCell","cellParams","getCellParams","cellMode","_ref2","rowStyle","rowProps","slots","isNotVisible","rowHeight","selected","containerWidth","isLastVisible","needsHorizontalScrollbar","contentSize","max","shouldExtendContent","size","minHeight","useEffect","rootStyle","overflowX","overflowY","getRenderContext","register","getRootProps","inputProps","onScroll","onWheel","onTouchMove","role","getContentProps","getRenderZoneProps"],"sources":["/home/dell/dev/upwork/casdoor-auth/milana-casdoor-auth/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"style\"],\n  _excluded2 = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../rowSelection/gridRowSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils';\nimport { getMinimalContentHeight } from '../rows/gridRowsUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// Uses binary search to avoid looping through all possible positions\nexport function binarySearch(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const areRenderContextsEqual = (context1, context2) => {\n  if (context1 === context2) {\n    return true;\n  }\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\n// The `maxSize` is 3 so that reselect caches the `renderedColumns` values for the pinned left,\n// unpinned, and pinned right sections.\nconst MEMOIZE_OPTIONS = {\n  maxSize: 3\n};\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const theme = useTheme();\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const rowStyleCache = React.useRef(Object.create(null));\n  const prevGetRowProps = React.useRef();\n  const prevRootRowStyle = React.useRef();\n  const getRenderedColumnsRef = React.useRef(defaultMemoize((columns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, indexOfColumnWithFocusedCell) => {\n    // If the selected column is not within the current range of columns being displayed,\n    // we need to render it at either the left or right of the columns,\n    // depending on whether it is above or below the range.\n    let focusedCellColumnIndexNotInRange;\n    const renderedColumns = columns.slice(firstColumnToRender, lastColumnToRender);\n    if (indexOfColumnWithFocusedCell > -1) {\n      // check if it is not on the left pinned column.\n      if (firstColumnToRender > indexOfColumnWithFocusedCell && indexOfColumnWithFocusedCell >= minFirstColumn) {\n        focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell;\n      }\n      // check if it is not on the right pinned column.\n      else if (lastColumnToRender < indexOfColumnWithFocusedCell && indexOfColumnWithFocusedCell < maxLastColumn) {\n        focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell;\n      }\n    }\n    return {\n      focusedCellColumnIndexNotInRange,\n      renderedColumns\n    };\n  }, MEMOIZE_OPTIONS));\n  const indexOfColumnWithFocusedCell = React.useMemo(() => {\n    if (cellFocus !== null) {\n      return visibleColumns.findIndex(column => column.field === cellFocus.field);\n    }\n    return -1;\n  }, [cellFocus, visibleColumns]);\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    }\n\n    // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n\n    // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.rowHasAutoHeight(row.id);\n    }\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(Math.abs(left), columnPositions);\n      lastColumnIndex = binarySearch(Math.abs(left) + containerDimensions.width, columnPositions);\n    }\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerDimensions({\n        width: rootRef.current.clientWidth,\n        height: rootRef.current.clientHeight\n      });\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'debouncedResize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const direction = theme.direction === 'ltr' ? 1 : -1;\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = direction * gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer, theme.direction]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('scrollPositionChange', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);\n  const handleScroll = useEventCallback(event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft;\n\n    // On iOS and macOS, negative offsets are possible when swiping past the start\n    if (!prevRenderContext.current || scrollTop < 0) {\n      return;\n    }\n    if (theme.direction === 'ltr') {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n    if (theme.direction === 'rtl') {\n      if (scrollLeft > 0) {\n        return;\n      }\n    }\n\n    // When virtualization is disabled, the context never changes during scroll\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  });\n  const handleWheel = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  });\n  const handleTouchMove = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  });\n  const indexOfRowWithFocusedCell = React.useMemo(() => {\n    if (cellFocus !== null) {\n      return currentPage.rows.findIndex(row => row.id === cellFocus.id);\n    }\n    return -1;\n  }, [cellFocus, currentPage.rows]);\n  const getRows = (params = {\n    renderContext\n  }) => {\n    var _rootProps$slotProps;\n    const {\n      onRowRender,\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    // If the selected row is not within the current range of rows being displayed,\n    // we need to render it at either the top or bottom of the rows,\n    // depending on whether it is above or below the range.\n\n    let isRowWithFocusedCellNotInRange = false;\n    if (indexOfRowWithFocusedCell > -1) {\n      const rowWithFocusedCell = currentPage.rows[indexOfRowWithFocusedCell];\n      if (firstRowToRender > indexOfRowWithFocusedCell || lastRowToRender < indexOfRowWithFocusedCell) {\n        isRowWithFocusedCellNotInRange = true;\n        if (indexOfRowWithFocusedCell > firstRowToRender) {\n          renderedRows.push(rowWithFocusedCell);\n        } else {\n          renderedRows.unshift(rowWithFocusedCell);\n        }\n        apiRef.current.calculateColSpan({\n          rowId: rowWithFocusedCell.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    let isColumnWihFocusedCellNotInRange = false;\n    if (firstColumnToRender > indexOfColumnWithFocusedCell || lastColumnToRender < indexOfColumnWithFocusedCell) {\n      isColumnWihFocusedCellNotInRange = true;\n    }\n    const {\n      focusedCellColumnIndexNotInRange,\n      renderedColumns\n    } = getRenderedColumnsRef.current(visibleColumns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, isColumnWihFocusedCellNotInRange ? indexOfColumnWithFocusedCell : -1);\n    const _ref = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.row) || {},\n      {\n        style: rootRowStyle\n      } = _ref,\n      rootRowProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const invalidatesCachedRowStyle = prevGetRowProps.current !== getRowProps || prevRootRowStyle.current !== rootRowStyle;\n    if (invalidatesCachedRowStyle) {\n      rowStyleCache.current = Object.create(null);\n    }\n    const rows = [];\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5;\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const isRowNotVisible = isRowWithFocusedCellNotInRange && cellFocus.id === id;\n      const lastVisibleRowIndex = isRowWithFocusedCellNotInRange ? firstRowToRender + i === currentPage.rows.length : firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      if (onRowRender) {\n        onRowRender(id);\n      }\n      const focusedCell = cellFocus !== null && cellFocus.id === id ? cellFocus.field : null;\n      const columnWithFocusedCellNotInRange = focusedCellColumnIndexNotInRange !== undefined && visibleColumns[focusedCellColumnIndexNotInRange];\n      const renderedColumnsWithFocusedCell = columnWithFocusedCellNotInRange && focusedCell ? [columnWithFocusedCellNotInRange, ...renderedColumns] : renderedColumns;\n      let tabbableCell = null;\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n      const _ref2 = typeof getRowProps === 'function' && getRowProps(id, model) || {},\n        {\n          style: rowStyle\n        } = _ref2,\n        rowProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n      if (!rowStyleCache.current[id]) {\n        const style = _extends({}, rowStyle, rootRowStyle);\n        rowStyleCache.current[id] = style;\n      }\n      rows.push( /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        focusedCellColumnIndexNotInRange: focusedCellColumnIndexNotInRange,\n        isNotVisible: isRowNotVisible,\n        rowHeight: baseRowHeight,\n        focusedCell: focusedCell,\n        tabbableCell: tabbableCell,\n        renderedColumns: renderedColumnsWithFocusedCell,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null || (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, rowProps, rootRowProps, {\n        style: rowStyleCache.current[id]\n      }), id));\n    }\n    prevGetRowProps.current = getRowProps;\n    prevRootRowStyle.current = rootRowStyle;\n    return rows;\n  };\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth >= containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = getMinimalContentHeight(apiRef, rootProps.rowHeight); // Give room to show the overlay when there no rows.\n    }\n\n    return size;\n  }, [apiRef, rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, needsHorizontalScrollbar, rootProps.autoHeight, rootProps.rowHeight, currentPage.rows.length]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  const rootStyle = React.useMemo(() => {\n    const style = {};\n    if (!needsHorizontalScrollbar) {\n      style.overflowX = 'hidden';\n    }\n    if (rootProps.autoHeight) {\n      style.overflowY = 'hidden';\n    }\n    return style;\n  }, [needsHorizontalScrollbar, rootProps.autoHeight]);\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.register('private', {\n    getRenderContext\n  });\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (inputProps = {}) => _extends({\n      ref: handleRef,\n      onScroll: handleScroll,\n      onWheel: handleWheel,\n      onTouchMove: handleTouchMove\n    }, inputProps, {\n      style: inputProps.style ? _extends({}, inputProps.style, rootStyle) : rootStyle,\n      role: 'presentation'\n    }),\n    getContentProps: ({\n      style\n    } = {}) => ({\n      style: style ? _extends({}, style, contentSize) : contentSize,\n      role: 'presentation'\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef,\n      role: 'rowgroup'\n    })\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}